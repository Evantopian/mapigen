"""
Auto-generated functional integration tests for the discord/discord service.

This file was generated by the `utils/generate_integration_tests.py` script.
It dynamically discovers operations and generates test cases with sampled
parameters to verify that the client can communicate with the endpoints.
"""
import pytest
from dotenv import load_dotenv

from mapigen import Mapi
from ..reporting import run_test_operation

load_dotenv()

PROVIDER_NAME = "discord"
API_NAME = "discord"

# A list of test cases, where each case is a tuple of:
# (operation_name, test_case_name, parameters_dict)
TEST_CASES = [
("applications_get_activity_instance", "applications_get_activity_instance", {'application_id': 'unknown_type', 'instance_id': 'test_instance_id'}),
("execute_slack_compatible_webhook", "execute_slack_compatible_webhook", {'webhook_id': 'unknown_type', 'webhook_token': 'test_webhook_token', 'wait': True, 'thread_id': 'unknown_type', 'text': 'unknown_type', 'username': 'unknown_type', 'icon_url': 'unknown_type', 'attachments': 'unknown_type'}),
("get_guild_widget_settings", "get_guild_widget_settings", {'guild_id': 'unknown_type'}),
("list_guild_channels", "list_guild_channels", {'guild_id': 'unknown_type'}),
("upload_application_attachment", "upload_application_attachment", {'application_id': 'unknown_type', 'file': 'unknown_type'}),
]

@pytest.fixture(scope="module")
def client() -> Mapi:
    """
    Pytest fixture to initialize the Mapi client for the discord service.
    This fixture is a placeholder and may need to be updated with authentication
    details for the service.
    """
    # TODO: Add authentication logic if required by the service.
    return Mapi()

@pytest.mark.parametrize("op_name, case_name, params", TEST_CASES)
def test_sampled_operation(client: Mapi, op_name: str, case_name: str, params: dict):
    """
    Dynamically tests an operation with a sampled set of parameters.
    The test case name (e.g., 'min_params') is included for clarity.
    """
    operations_checked = []

    def generic_assertion(data):
        """A generic assertion that passes as long as the call completes."""
        assert data is not None

    run_test_operation(
        client=client,
        provider_name=PROVIDER_NAME,
        api_name=API_NAME,
        op_name=op_name,
        operations_checked=operations_checked,
        assertion_callback=generic_assertion,
        **params
    )