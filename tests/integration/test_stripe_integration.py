"""
Auto-generated functional integration tests for the stripe service.

This file was generated by the `utils/generate_integration_tests.py` script.
It dynamically discovers GET and POST operations and generates test cases
with sampled parameters to verify that the client can communicate with the
endpoints.
"""
import pytest
from dotenv import load_dotenv

from mapigen import Mapi
from ..helpers import report
from ..reporting import run_test_operation

# Load environment variables from .env file
load_dotenv()

SERVICE_NAME = "stripe"

# A list of test cases, where each case is a tuple of:
# (operation_name, test_case_name, parameters_dict)
TEST_CASES = [
("GetAccount", "GetAccount (min_params)", {}),
("GetAccount", "GetAccount (max_params)", {'expand': []}),
("GetIssuingTokensToken", "GetIssuingTokensToken (min_params)", {}),
("GetIssuingTokensToken", "GetIssuingTokensToken (max_params)", {'expand': [], 'token': 'test_token'}),
("PostAccountsAccountPersonsPerson", "PostAccountsAccountPersonsPerson (min_params)", {}),
("PostAccountsAccountPersonsPerson", "PostAccountsAccountPersonsPerson (max_params)", {'account': 'test_account', 'person': 'test_person', 'additional_tos_acceptances': 'unknown_type', 'address': 'unknown_type', 'address_kana': 'unknown_type', 'address_kanji': 'unknown_type', 'dob': 'unknown_type', 'documents': 'unknown_type', 'email': 'unknown_type', 'expand': 'unknown_type', 'first_name': 'unknown_type', 'first_name_kana': 'unknown_type', 'first_name_kanji': 'unknown_type', 'full_name_aliases': 'unknown_type', 'gender': 'unknown_type', 'id_number': 'unknown_type', 'id_number_secondary': 'unknown_type', 'last_name': 'unknown_type', 'last_name_kana': 'unknown_type', 'last_name_kanji': 'unknown_type', 'maiden_name': 'unknown_type', 'metadata': 'unknown_type', 'nationality': 'unknown_type', 'person_token': 'unknown_type', 'phone': 'unknown_type', 'political_exposure': 'unknown_type', 'registered_address': 'unknown_type', 'relationship': 'unknown_type', 'ssn_last_4': 'unknown_type', 'us_cfpb_data': 'unknown_type', 'verification': 'unknown_type'}),
("PostPaymentMethodsPaymentMethodDetach", "PostPaymentMethodsPaymentMethodDetach (min_params)", {}),
("PostPaymentMethodsPaymentMethodDetach", "PostPaymentMethodsPaymentMethodDetach (max_params)", {'payment_method': 'test_payment_method', 'expand': 'unknown_type'}),
("PostWebhookEndpointsWebhookEndpoint", "PostWebhookEndpointsWebhookEndpoint (min_params)", {}),
("PostWebhookEndpointsWebhookEndpoint", "PostWebhookEndpointsWebhookEndpoint (max_params)", {'webhook_endpoint': 'test_webhook_endpoint', 'description': 'unknown_type', 'disabled': 'unknown_type', 'enabled_events': 'unknown_type', 'expand': 'unknown_type', 'metadata': 'unknown_type', 'url': 'unknown_type'}),
]

@pytest.fixture(scope="module")
def client() -> Mapi:
    """
    Pytest fixture to initialize the Mapi client for the stripe service.
    This fixture is a placeholder and may need to be updated with authentication
    details for the service.
    """
    # TODO: Add authentication logic if required by the service.
    return Mapi()

@pytest.mark.parametrize("op_name, case_name, params", TEST_CASES)
def test_sampled_operation(client: Mapi, op_name: str, case_name: str, params: dict):
    """
    Dynamically tests a GET or POST operation with a sampled set of parameters.
    The test case name (e.g., 'min_params', 'max_params') is included for clarity.
    """
    # operations_checked is not strictly needed here since each case is a separate
    # test, but it's kept for consistency with the helper function signature.
    operations_checked = []

    def generic_assertion(data):
        """A generic assertion that passes as long as the call completes."""
        assert True

    run_test_operation(
        client=client,
        service_name=SERVICE_NAME,
        op_name=op_name,
        report=report,
        operations_checked=operations_checked,
        assertion_callback=generic_assertion,
        **params
    )