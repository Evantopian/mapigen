"""
Auto-generated functional integration tests for the asana-sdk service.

This file was generated by the `utils/generate_integration_tests.py` script.
It dynamically discovers GET and POST operations and generates test cases
with sampled parameters to verify that the client can communicate with the
endpoints.
"""
import pytest
from dotenv import load_dotenv

from mapigen import Mapi
from ..helpers import result_reporter as report
from ..reporting import run_test_operation

load_dotenv()

SERVICE_NAME = "asana-sdk"

# A list of test cases, where each case is a tuple of:
# (operation_name, test_case_name, parameters_dict)
TEST_CASES = [
("addCustomFieldSettingForPortfolio", "addCustomFieldSettingForPortfolio (min_params)", {}),
("addCustomFieldSettingForPortfolio", "addCustomFieldSettingForPortfolio (max_params)", {'portfolio_gid': 'test_portfolio_gid', 'data': 'unknown_type'}),
("createTask", "createTask (min_params)", {}),
("createTask", "createTask (max_params)", {'opt_fields': [], 'data': 'unknown_type'}),
("getProjectStatus", "getProjectStatus (min_params)", {}),
("getProjectStatus", "getProjectStatus (max_params)", {'project_status_gid': 'test_project_status_gid', 'opt_fields': []}),
("getTimeTrackingEntry", "getTimeTrackingEntry (min_params)", {}),
("getTimeTrackingEntry", "getTimeTrackingEntry (max_params)", {'time_tracking_entry_gid': 'test_time_tracking_entry_gid', 'opt_fields': []}),
("updateGoalMetric", "updateGoalMetric (min_params)", {}),
("updateGoalMetric", "updateGoalMetric (max_params)", {'goal_gid': 'test_goal_gid', 'opt_fields': [], 'data': 'unknown_type'}),
]

@pytest.fixture(scope="module")
def client() -> Mapi:
    """
    Pytest fixture to initialize the Mapi client for the asana-sdk service.
    This fixture is a placeholder and may need to be updated with authentication
    details for the service.
    """
    # TODO: Add authentication logic if required by the service.
    return Mapi()

@pytest.mark.parametrize("op_name, case_name, params", TEST_CASES)
def test_sampled_operation(client: Mapi, op_name: str, case_name: str, params: dict):
    """
    Dynamically tests a GET or POST operation with a sampled set of parameters.
    The test case name (e.g., 'min_params', 'max_params') is included for clarity.
    """
    # operations_checked is not strictly needed here since each case is a separate
    # test, but it's kept for consistency with the helper function signature.
    operations_checked = []

    def generic_assertion(data):
        """A generic assertion that passes as long as the call completes."""
        assert True

    run_test_operation(
        client=client,
        service_name=SERVICE_NAME,
        op_name=op_name,
        report=report,
        operations_checked=operations_checked,
        assertion_callback=generic_assertion,
        **params
    )