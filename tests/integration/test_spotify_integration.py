"""
Auto-generated functional integration tests for the spotify service.

This file was generated by the `utils/generate_integration_tests.py` script.
It dynamically discovers GET and POST operations and generates test cases
with sampled parameters to verify that the client can communicate with the
endpoints.
"""
import pytest
from dotenv import load_dotenv

from mapigen import Mapi
from ..helpers import result_reporter as report
from ..reporting import run_test_operation

# Load environment variables from .env file
load_dotenv()

SERVICE_NAME = "spotify"

# A list of test cases, where each case is a tuple of:
# (operation_name, test_case_name, parameters_dict)
TEST_CASES = [
("add-to-queue", "add-to-queue (min_params)", {}),
("add-to-queue", "add-to-queue (max_params)", {'uri': 'test_uri', 'device_id': 'test_device_id'}),
("get-a-shows-episodes", "get-a-shows-episodes (min_params)", {}),
("get-a-shows-episodes", "get-a-shows-episodes (max_params)", {'id': 'test_id', 'market': 'test_market', 'limit': 20, 'offset': 0}),
("get-featured-playlists", "get-featured-playlists (min_params)", {}),
("get-featured-playlists", "get-featured-playlists (max_params)", {'locale': 'test_locale', 'limit': 20, 'offset': 0}),
("get-recommendations", "get-recommendations (min_params)", {}),
("get-recommendations", "get-recommendations (max_params)", {'limit': 20, 'market': 'test_market', 'seed_artists': 'test_seed_artists', 'seed_genres': 'test_seed_genres', 'seed_tracks': 'test_seed_tracks', 'min_acousticness': 1.1, 'max_acousticness': 1.1, 'target_acousticness': 1.1, 'min_danceability': 1.1, 'max_danceability': 1.1, 'target_danceability': 1.1, 'min_duration_ms': 1, 'max_duration_ms': 1, 'target_duration_ms': 1, 'min_energy': 1.1, 'max_energy': 1.1, 'target_energy': 1.1, 'min_instrumentalness': 1.1, 'max_instrumentalness': 1.1, 'target_instrumentalness': 1.1, 'min_key': 1, 'max_key': 1, 'target_key': 1, 'min_liveness': 1.1, 'max_liveness': 1.1, 'target_liveness': 1.1, 'min_loudness': 1.1, 'max_loudness': 1.1, 'target_loudness': 1.1, 'min_mode': 1, 'max_mode': 1, 'target_mode': 1, 'min_popularity': 1, 'max_popularity': 1, 'target_popularity': 1, 'min_speechiness': 1.1, 'max_speechiness': 1.1, 'target_speechiness': 1.1, 'min_tempo': 1.1, 'max_tempo': 1.1, 'target_tempo': 1.1, 'min_time_signature': 1, 'max_time_signature': 1, 'target_time_signature': 1, 'min_valence': 1.1, 'max_valence': 1.1, 'target_valence': 1.1}),
("skip-users-playback-to-previous-track", "skip-users-playback-to-previous-track (min_params)", {}),
("skip-users-playback-to-previous-track", "skip-users-playback-to-previous-track (max_params)", {'device_id': 'test_device_id'}),
]

@pytest.fixture(scope="module")
def client() -> Mapi:
    """
    Pytest fixture to initialize the Mapi client for the spotify service.
    This fixture is a placeholder and may need to be updated with authentication
    details for the service.
    """
    # TODO: Add authentication logic if required by the service.
    return Mapi()

@pytest.mark.parametrize("op_name, case_name, params", TEST_CASES)
def test_sampled_operation(client: Mapi, op_name: str, case_name: str, params: dict):
    """
    Dynamically tests a GET or POST operation with a sampled set of parameters.
    The test case name (e.g., 'min_params', 'max_params') is included for clarity.
    """
    # operations_checked is not strictly needed here since each case is a separate
    # test, but it's kept for consistency with the helper function signature.
    operations_checked = []

    def generic_assertion(data):
        """A generic assertion that passes as long as the call completes."""
        assert True

    run_test_operation(
        client=client,
        service_name=SERVICE_NAME,
        op_name=op_name,
        report=report,
        operations_checked=operations_checked,
        assertion_callback=generic_assertion,
        **params
    )