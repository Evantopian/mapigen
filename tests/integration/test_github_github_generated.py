"""
Auto-generated functional integration tests for the github/github service.

This file was generated by the `utils/generate_integration_tests.py` script.
It dynamically discovers operations and generates test cases with sampled
parameters to verify that the client can communicate with the endpoints.
"""
import pytest
from dotenv import load_dotenv

from mapigen import Mapi
from ..reporting import run_test_operation

load_dotenv()

PROVIDER_NAME = "github"
API_NAME = "github"

# A list of test cases, where each case is a tuple of:
# (operation_name, test_case_name, parameters_dict)
TEST_CASES = [
("actions/add-custom-labels-to-self-hosted-runner-for-org", "actions/add-custom-labels-to-self-hosted-runner-for-org", {'org': 'test_org', 'runner_id': 1, 'labels': 'unknown_type'}),
("classroom/get-a-classroom", "classroom/get-a-classroom", {'classroom_id': 1}),
("migrations/start-for-org", "migrations/start-for-org", {'org': 'test_org', 'repositories': 'unknown_type', 'lock_repositories': 'unknown_type', 'exclude_metadata': 'unknown_type', 'exclude_git_data': 'unknown_type', 'exclude_attachments': 'unknown_type', 'exclude_releases': 'unknown_type', 'exclude_owner_projects': 'unknown_type', 'org_metadata_only': 'unknown_type', 'exclude': 'unknown_type'}),
("repos/get-commit", "repos/get-commit", {'owner': 'test_owner', 'repo': 'test_repo', 'ref': 'test_ref', 'page': 1, 'per_page': 30}),
("users/list-ssh-signing-keys-for-user", "users/list-ssh-signing-keys-for-user", {'username': 'test_username', 'per_page': 30, 'page': 1}),
]

@pytest.fixture(scope="module")
def client() -> Mapi:
    """
    Pytest fixture to initialize the Mapi client for the github service.
    This fixture is a placeholder and may need to be updated with authentication
    details for the service.
    """
    # TODO: Add authentication logic if required by the service.
    return Mapi()

@pytest.mark.parametrize("op_name, case_name, params", TEST_CASES)
def test_sampled_operation(client: Mapi, op_name: str, case_name: str, params: dict):
    """
    Dynamically tests an operation with a sampled set of parameters.
    The test case name (e.g., 'min_params') is included for clarity.
    """
    operations_checked = []

    def generic_assertion(data):
        """A generic assertion that passes as long as the call completes."""
        assert data is not None

    run_test_operation(
        client=client,
        provider_name=PROVIDER_NAME,
        api_name=API_NAME,
        op_name=op_name,
        operations_checked=operations_checked,
        assertion_callback=generic_assertion,
        **params
    )